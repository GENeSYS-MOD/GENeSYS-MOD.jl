# GENeSYS-MOD v3.1 [Global Energy System Model]  ~ March 2022
#
# #############################################################
#
# Copyright 2020 Technische Universit칛t Berlin and DIW Berlin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# #############################################################
"""
Internal function used in the run process to define the model variables.
"""
function genesysmod_dec(model,Sets, Subsets, Params,Switch)

    洧니 = Sets.Region_full
    洧늿 = Sets.Fuel
    洧닏 = Sets.Year
    洧닊 = Sets.Technology
    洧늾 = Sets.Emission
    洧닆 = Sets.Mode_of_operation
    洧닅 = Sets.Timeslice
    洧닉 = Sets.Storage
    洧닆洧닣 = Sets.ModalType
    洧닉洧닕 = Sets.Sector

    #####################
    # Model Variables #
    #####################

    ############### Capacity Variables ############*
    @variable(model, NewCapacity[洧닏,洧닊,洧니] >= 0)
    @variable(model, AccumulatedNewCapacity[洧닏,洧닊,洧니] >= 0)
    @variable(model, TotalCapacityAnnual[洧닏,洧닊,洧니] >= 0)

    ############### Activity Variables #############

    @variable(model, RateOfActivity[洧닏,洧닅,洧닊,洧닆,洧니] >= 0)
    @variable(model, TotalTechnologyAnnualActivity[洧닏,洧닊,洧니] >= 0)
    
    @variable(model, TotalAnnualTechnologyActivityByMode[洧닏,洧닊,洧닆,洧니] >= 0)
    
    @variable(model, ProductionByTechnologyAnnual[洧닏,洧닊,洧늿,洧니] >= 0)
    
    @variable(model, UseByTechnologyAnnual[洧닏,洧닊,洧늿,洧니] >= 0)
    
    @variable(model, TotalActivityPerYear[洧니,洧닅,洧닊,洧닏] >= 0)
    @variable(model, CurtailedEnergyAnnual[洧닏,洧늿,洧니] >= 0)
    @variable(model, CurtailedCapacity[洧니,洧닅,洧닊,洧닏] >= 0)
    @variable(model, DispatchDummy[洧니,洧닅,洧닊,洧닏] >= 0)

    
    ############### Costing Variables #############

    @variable(model, CapitalInvestment[洧닏,洧닊,洧니] >= 0)
    @variable(model, DiscountedCapitalInvestment[洧닏,洧닊,洧니] >= 0)
    @variable(model, SalvageValue[洧닏,洧닊,洧니] >= 0)
    @variable(model, DiscountedSalvageValue[洧닏,洧닊,洧니] >= 0)
    @variable(model, OperatingCost[洧닏,洧닊,洧니] >= 0)
    @variable(model, DiscountedOperatingCost[洧닏,洧닊,洧니] >= 0)
    @variable(model, AnnualVariableOperatingCost[洧닏,洧닊,洧니] >= 0)
    @variable(model, AnnualFixedOperatingCost[洧닏,洧닊,洧니] >= 0)
    @variable(model, VariableOperatingCost[洧닏,洧닅,洧닊,洧니] >= 0)
    @variable(model, TotalDiscountedCost[洧닏,洧니] >= 0)
    @variable(model, TotalDiscountedCostByTechnology[洧닏,洧닊,洧니] >= 0)
    @variable(model, ModelPeriodCostByRegion[洧니] >= 0)

    @variable(model, AnnualCurtailmentCost[洧닏,洧늿,洧니] >= 0)
    @variable(model, DiscountedAnnualCurtailmentCost[洧닏,洧늿,洧니] >= 0)

    

    ############### Storage Variables #############

    @variable(model, StorageLevelYearStart[洧닉,洧닏,洧니] >= 0)
    @variable(model, StorageLevelTSStart[洧닉,洧닏,洧닅,洧니] >= 0)

    @variable(model, AccumulatedNewStorageCapacity[洧닉,洧닏,洧니] >= 0) 
    @variable(model, NewStorageCapacity[洧닉,洧닏,洧니] >= 0) 
    @variable(model, CapitalInvestmentStorage[洧닉,洧닏,洧니] >= 0) 
    @variable(model, DiscountedCapitalInvestmentStorage[洧닉,洧닏,洧니] >= 0) 
    @variable(model, SalvageValueStorage[洧닉,洧닏,洧니] >= 0) 
    @variable(model, DiscountedSalvageValueStorage[洧닉,洧닏,洧니] >= 0) 
    @variable(model, TotalDiscountedStorageCost[洧닉,洧닏,洧니] >= 0) 

    

    ######## Reserve Margin #############

    if Switch.switch_dispatch == 0
        @variable(model, TotalActivityInReserveMargin[洧니,洧닏,洧닅] >= 0)
        @variable(model, DemandNeedingReserveMargin[洧닏,洧닅,洧니] >= 0) 
    end

    

    ######## RE Gen Target #############

    @variable(model, TotalREProductionAnnual[洧닏,洧니,洧늿]) 
    @variable(model, RETotalDemandOfTargetFuelAnnual[洧닏,洧니,洧늿]) 
    @variable(model, TotalTechnologyModelPeriodActivity[洧닊,洧니]) 
    @variable(model, RETargetMin[洧닏,洧니] >= 0) 

    

    ######## Emissions #############

    @variable(model, AnnualTechnologyEmissionByMode[洧닏,洧닊,洧늾,洧닆,洧니]) 
    @variable(model, AnnualTechnologyEmission[洧닏,洧닊,洧늾,洧니]) 
    @variable(model, AnnualTechnologyEmissionPenaltyByEmission[洧닏,洧닊,洧늾,洧니]) 
    @variable(model, AnnualTechnologyEmissionsPenalty[洧닏,洧닊,洧니]) 
    @variable(model, DiscountedTechnologyEmissionsPenalty[洧닏,洧닊,洧니]) 
    @variable(model, AnnualEmissions[洧닏,洧늾,洧니]) 
    @variable(model, ModelPeriodEmissions[洧늾,洧니]) 
    @variable(model, WeightedAnnualEmissions[洧닏,洧늾,洧니])

    


    ######### SectoralEmissions #############

    @variable(model, AnnualSectoralEmissions[洧닏,洧늾,洧닉洧닕,洧니]) 

    

    ######### Trade #############

    @variable(model, Import[洧닏,洧닅,洧늿,洧니,洧니] >= 0) 
    @variable(model, Export[洧닏,洧닅,洧늿,洧니,洧니] >= 0) 

    @variable(model, NewTradeCapacity[洧닏, 洧늿, 洧니, 洧니] >= 0) 
    @variable(model, TotalTradeCapacity[洧닏, 洧늿, 洧니, 洧니] >= 0) 
    @variable(model, NewTradeCapacityCosts[洧닏, 洧늿, 洧니, 洧니] >= 0) 
    @variable(model, DiscountedNewTradeCapacityCosts[洧닏, 洧늿, 洧니, 洧니] >= 0) 

    @variable(model, NetTrade[洧닏,洧닅,洧늿,洧니]) 
    @variable(model, NetTradeAnnual[洧닏,洧늿,洧니]) 
    @variable(model, TotalTradeCosts[洧닏,洧닅,洧니]) 
    @variable(model, AnnualTotalTradeCosts[洧닏,洧니]) 
    @variable(model, DiscountedAnnualTotalTradeCosts[洧닏,洧니]) 

    

    ######### Transportation #############


    #TrajectoryLowerLimit(洧닏) 
    #TrajectoryUpperLimit(洧닏) 

    @variable(model, DemandSplitByModalType[洧닆洧닣,洧닅,洧니,Subsets.TransportFuels,洧닏]) 
    @variable(model, ProductionSplitByModalType[洧닆洧닣,洧닅,洧니,Subsets.TransportFuels,洧닏]) 

    if Switch.switch_ramping == 1

        ######## Ramping #############      
        @variable(model, ProductionUpChangeInTimeslice[洧닏,洧닅,洧늿,洧닊,洧니] >= 0) 
        @variable(model, ProductionDownChangeInTimeslice[洧닏,洧닅,洧늿,洧닊,洧니] >= 0)     
        @variable(model, AnnualProductionChangeCost[洧닏,洧닊,洧니] >= 0) 
        @variable(model, DiscountedAnnualProductionChangeCost[洧닏,洧닊,洧니] >= 0) 
    end

    if Switch.switch_intertemporal == 1
        @variable(model, RateOfTotalActivity[洧닏,洧닅,洧닊,洧니])
    end

    @variable(model, BaseYearSlack[洧늿]) 
    @variable(model, BaseYearOvershoot[洧니,洧닊,洧늿,洧닏] >= 0)
    @variable(model, DiscountedSalvageValueTransmission[洧닏,洧니] >= 0) 
    
end

